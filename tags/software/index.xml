<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software on All in Camera</title>
    <link>http://allincamera.github.io/tags/software/</link>
    <description>Recent content in Software on All in Camera</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Apr 2016 17:14:30 +0800</lastBuildDate>
    <atom:link href="http://allincamera.github.io/tags/software/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>图解噪声与去噪 之二：从『均值滤波』到『BM3D』</title>
      <link>http://allincamera.github.io/post/noise_and_denoise2/</link>
      <pubDate>Fri, 29 Apr 2016 17:14:30 +0800</pubDate>
      
      <guid>http://allincamera.github.io/post/noise_and_denoise2/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;本文系微信公众号《大话成像》，知乎专栏《大话成像 all in camera》原创文章，转载请注明出处。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;上一篇讲过了temporal noise和Fix patter noise的分离，通过多帧平均可以去除掉temporal noise，并分离出FPN，在这篇将介绍如何去除FPN。&lt;/p&gt;

&lt;p&gt;在信号处理教科书中，介绍过很多经典的图像去噪方法，主要的是针对随机噪声的，对于图像中非随机噪声，比如sensor本身的物理缺陷导致的hot pixel，weak pixel 或是dead pixel，一般称之为impulse noise，对于impulse noise有单独的处理方法，因为他们不属于随机噪声。&lt;/p&gt;

&lt;p&gt;随机噪声也就是在比图像的真实信号或高或低的不确定变化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/random_noise.png&#34; alt=&#34;random noise&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如果中间的虚线视作真实信号，红色和蓝色的曲线代表随机噪声叠加后的信号，如果虚线定义为0，那么所有随机噪声求和应为0 ，在统计学上叫零和噪声。由于零和噪声的这种特点，均值滤波可以降低图像的噪声。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/random_noise_average_value.png&#34; alt=&#34;random noise average value&#34; /&gt;&lt;/p&gt;

&lt;p&gt;如图所示，浅蓝色的线代表红蓝线求均值以后的信号，波动的幅度明显减小了，也就是噪声降低了。&lt;/p&gt;

&lt;h2 id=&#34;均值滤波与变换域去噪:f2f70d1c93bc2130230de88cd673ff17&#34;&gt;均值滤波与变换域去噪&lt;/h2&gt;

&lt;p&gt;教科书里讲图像去噪声，第一个提到的就是均值滤波，在图像处理中，就是当前像素的值用周围n个像素的均值来代替。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/local_average_formula.png&#34; alt=&#34;local average formula&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在实际信号处理中，就是用一个n x n 的模版 A 对图像进行卷积，比如：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/local_avg_filter.png&#34; alt=&#34;local average filter&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当前像素就是处在矩阵中心的像素，它的值等于周围所有像素的值包括它自身取均值。&lt;/p&gt;

&lt;p&gt;这样的一个基本均值滤波，它可以去掉噪声，但同时也会把图像搞模糊，比如当前的像素正好是一个图案的边缘，左边是白色的，像素值是200，右边是黑色的，像素值是10，做完均值滤波，（200+200+200+10+10+10+10+10+10）/9 = 74， 这样图像的细节就被模糊掉了。于是人们就对这种均值滤波进行了一些改进，比如增加图像边缘方向的判断，红线的方向上相邻像素的数值差不多，所以在做均值的时候只把这个方向的两个像素计算在内。这样既去掉了一些噪声，又保持了锐度。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/pixel_array.png&#34; alt=&#34;pixel array&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这样由于做均值的像素变少了，去噪的效果不太好，于是有人想出一种none local mean的方法，也就是做均值的像素不再是领域的像素，扩大些范围找相似的，然后再做均值。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/none_local_mean.png&#34; alt=&#34;none local mean value&#34; /&gt;&lt;/p&gt;

&lt;p&gt;绿色的部分和中心要处理的部分很相似，求均值的时候就把这些部分算进去，而红色的部分不相似，去均值的时候就排除这些部分。很容易想象，搜索的范围越大，计算量越大。&lt;/p&gt;

&lt;p&gt;这些方法都是从空间的角度去思考如何去噪，也就是所谓的spatial noise reduction，这条路子能想的方法也都做得差不多了，于是有人换个角度想问题，就有了变换域做去噪的方法。通过数学变换，在变换域上把信号和噪声分离，然后把噪声过滤掉，剩下的就是信号。如下图，&lt;/p&gt;

&lt;p&gt;没有噪声的信号看起来比较光滑：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/signal_wo_noise.png&#34; alt=&#34;signal no noise&#34; /&gt;&lt;/p&gt;

&lt;p&gt;带噪声的信号就会有些毛刺：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/signal_with_noise_glitch.png&#34; alt=&#34;signal with noise glitch&#34; /&gt;&lt;/p&gt;

&lt;p&gt;把带噪声的信号变换到一个域（比如频域，小波域等等)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/signal_noise_trans.png&#34; alt=&#34;signal noise trans&#34; /&gt;&lt;/p&gt;

&lt;p&gt;高于一个阈值的部分就是噪声，设一个截止值，把高于截止值的部分去掉&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/signal_noise_trans_threshold.png&#34; alt=&#34;signal noise trans threshold&#34; /&gt;&lt;/p&gt;

&lt;p&gt;再做反变换，就得到了干净的信号。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/signal_trans_back.png&#34; alt=&#34;signal trans back&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从频率上可以把噪声分为高中低频噪声，用这种变换域的方法就可以把不同频率的噪声分离，然后有效的去掉。像傅立叶变换，小波变换都是比较常见的变换域方法。&lt;/p&gt;

&lt;h2 id=&#34;bm3d去噪:f2f70d1c93bc2130230de88cd673ff17&#34;&gt;BM3D去噪&lt;/h2&gt;

&lt;p&gt;简单来说，BM3D融合了spatial denoise和tranform denoise，可以得到最高的峰值信噪比。它先吸取了NLM中的计算相似块的方法，然后又融合了小波变换域去噪的方法。这是芬兰Tampere工业大学在2007年发表的论文里提出的算法。（了解NOKIA的人就知道Tampere这个城市就是NOKIA最早起源的地方）。&lt;/p&gt;

&lt;p&gt;具体算法如下：&lt;/p&gt;

&lt;p&gt;第一步，搜索相似块，然后把相似的块grouping成一个个3D stack。（图像本身是2D，变成stack就成了3D）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/bm3d1_wm.png&#34; alt=&#34;BM3D Step1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;第二步，把这些3D stack进行变换域&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/bm3d2_wm.png&#34; alt=&#34;BM3D Step2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;第三步，3D 协同滤波&amp;mdash;-听着很邪乎，细节需要自行wiki&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/bm3d3_wm.png&#34; alt=&#34;BM3D Step3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;第四步，反变换以及blending&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/avg2bm3d/bm3d4_wm.png&#34; alt=&#34;BM3D Step4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;红色模块里提到的在变换域中thresholding的设定，有自适应计算的方法，但在工程中用的效果比较好的是噪声模型法，关于噪声模型，我们会在下一篇中进行介绍。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本文系微信公众号《大话成像》，知乎专栏《大话成像 all in camera》原创文章，转载请注明出处。&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>图解噪声与去噪 之一： fix pattern noise（FPN）与 temporal noise</title>
      <link>http://allincamera.github.io/post/noise_and_denoise1/</link>
      <pubDate>Tue, 19 Apr 2016 18:55:14 +0800</pubDate>
      
      <guid>http://allincamera.github.io/post/noise_and_denoise1/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;本文系微信公众号《大话成像》，知乎专栏《大话成像 all in camera》原创文章，转载请注明出处。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;噪声分类:a6abbaf212851257f798600f7bb6b968&#34;&gt;噪声分类&lt;/h2&gt;

&lt;p&gt;噪声有很多种分类方法，比如从频率上分，可以分为高频，中频，低频噪声。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/noise_and_denoise1/no_noise.label.png&#34; alt=&#34;No Noise&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/noise_and_denoise1/high_freq_noise.label.png&#34; alt=&#34;High Frequency Noise&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/noise_and_denoise1/mid_freq_noise.label.png&#34; alt=&#34;Mid Frequency Noise&#34; /&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/noise_and_denoise1/low_frequency_noise.label.png&#34; alt=&#34;Low Frequency Noise&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从色彩空间上分，可以分为luma noise亮度噪声与chroma noise彩色噪声。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/noise_and_denoise1/luma_chroma_noise.wm.jpg&#34; alt=&#34;Luma Chroma Noise&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从时态上分，可以分为fix pattern noise与temporal noise。Fix pattern noise 与时间无关，表现上看就是噪声幅度不随时间变化。Temporal noise是随时间变化，在低光下录制的视频中不断变化的细小信号就是temporal noise。&lt;/p&gt;

&lt;p&gt;也有的分法把fix pattern noise定义为在图像行或者列存在的一条条的噪声，如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/noise_and_denoise1/fix_pattern_noise.label.png&#34; alt=&#34;Fix Pattern Noise&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Temporal noise视觉上是一种高频噪声。&lt;/p&gt;

&lt;h2 id=&#34;噪声计算:a6abbaf212851257f798600f7bb6b968&#34;&gt;噪声计算&lt;/h2&gt;

&lt;p&gt;均值 &lt;code&gt;$\mu = \dfrac {\sum^{n}_{i=1}X_{i}}{n}$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;标准差 &lt;code&gt;$\sigma=\dfrac {1}{n-1}\sum ^{n}_{i=1}\left(u-x{i}\right)^{2}$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;图像的标准差可以作为图像噪声水平的评价值。&lt;/p&gt;

&lt;p&gt;按照如下曝光时间，每个曝光时间拍30张black 照片。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;	exp_time = [0.063, 1.003,16, 64,257,513,770,1027,1283,1540,1797,2054];
	raw_avg = 0;
	for kk = 0:30:(30*12-1)
	    for i = 1:30
	        fname = fileNames{kk+i};      
	        fprintf(&#39;processing %s %d\n&#39;, fname, kk+i);
	        raw = double(imread([fold fname]));
	        raw = raw(:,:,1);
	        raw_avg = raw + raw_avg;  
	    end
	    raw_avg = raw_avg./30; 
	    
	    avg_signal((kk/30)+1) = round(mean2(raw_avg));
	    fpn_total((kk/30)+1) = std2(raw_avg);
	     
	    fpn_col_exp((kk/30)+1) = std(mean(raw_avg,1));
	%     avg_sig_col_exp((kk/30)+1,:) = mean(raw_avg,1);
	    
	    fpn_row_exp((kk/30)+1)     = std(mean(raw_avg,2)&#39;);
	%     avg_sig_row_exp((kk/30)+1) = mean(raw_avg,2)&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如上计算，可以得到图像的平均信号，每个曝光的FPN noise，以及行，列FPN noise,行列均值。
&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/noise_and_denoise1/avg_sig_total_fpn.wm.png&#34; alt=&#34;Average Signal and total FPN&#34; /&gt;&lt;/p&gt;

&lt;p&gt;把曝光逐渐增加，确保图像能够达到饱和，在10个曝光值，每个曝光值下拍30张flat field照片&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-matlab&#34;&gt;	raw_avg = 0;
	temp_noise = zeros(30,480*752);
	for kk = 0:30:(30*11-1)
	    for i = 1:30
	        fname = fileNames{kk+i};
	        fprintf(&#39;processing %s %d\n&#39;, fname, kk+i);
	        raw = double(imread([fold fname]));
	        raw = raw(:,:,1);
	        raw_avg = raw + raw_avg;
	        temp_noise(i,:) = raw(:)&#39;;
	    end
	    raw_avg = raw_avg./30;
	    
	    std_temp_noise = std(temp_noise,1);
	    
	    avg_signal((kk/30)+1) = round(mean2(raw_avg));
	    temporal_total((kk/30)+1) = median(std_temp_noise);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如上计算，可以得到图像的temporal noise&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/noise_and_denoise1/total_temporal.wm.png&#34; alt=&#34;Total Temporal&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最后图像饱和，所以噪声降低至0。&lt;/p&gt;

&lt;p&gt;FPN noise是相关噪声，temporal noise是不相关噪声。&lt;/p&gt;

&lt;p&gt;两个图像相加：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$S = S_1 + S_2$&lt;/code&gt; S代表信号&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$\sigma^{2}_{t}=\sigma^{2}_{t1}+\sigma^{2}_{t2}$&lt;/code&gt; &lt;code&gt;$\sigma_{t}$&lt;/code&gt; 代表temporal noise&lt;/p&gt;

&lt;p&gt;信噪比SNR &lt;code&gt;$\dfrac {S}{\sigma_{t}}=\dfrac {S_{1}+S_{2}}{\left(\sigma^{2}_{t1}+\sigma^{2}_{t2}\right)^{0.5}}$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当 &lt;code&gt;$S_{1} = S_{2}$&lt;/code&gt; , &lt;code&gt;$\sigma_{t1} = \sigma_{t2}$&lt;/code&gt;, 信噪比SNR &lt;code&gt;$\dfrac {S}{\sigma_{t}}=2^{0.5}\dfrac{S_{1}}{\sigma_{t1}}$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当 &lt;code&gt;$S_{1} = S_{2}=...=S_{n}$&lt;/code&gt; , 信噪比SNR &lt;code&gt;$\dfrac {S}{\sigma_{t}}=n^{0.5}\dfrac{S_{1}}{\sigma_{t1}}$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;该公式从理论上证明了n帧平均会降低temporal noise &lt;code&gt;$n^{0.5}$&lt;/code&gt; 倍。所以信号处理中去除temporal noise的方法就是多帧平均加运动检测，如果存在图像存在变化就不累加，如果图像无变化就累加平均。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/allincamera/imgur/master/noise_and_denoise1/frame_average.wm.png&#34; alt=&#34;Frame Average&#34; /&gt;&lt;/p&gt;

&lt;p&gt;而FPN noise 是相关噪声&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$\sigma_{fpn} = \sigma_{fpn1} + \sigma_{fpn2}$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$S = S_{1} + S_{2}$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ \dfrac {S}{\sigma_{fpn}} = \dfrac {S_{1}+S_{2}}{\sigma_{fpn1}+\sigma_{fpn2}} $&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当 &lt;code&gt;$ S_{1} = S_{2} $&lt;/code&gt;, &lt;code&gt;$ \sigma_{fpn1} = \sigma_{fpn2} $&lt;/code&gt; 时， &lt;code&gt;$ \dfrac {S}{\sigma_{fpn}} = \dfrac {S_{1}}{\sigma_{fpn1}} $&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;多帧平均不会降低FPN。&lt;/p&gt;

&lt;p&gt;通过上图可以看出，经过多帧平均后，噪声的floor变成了FPN。&lt;/p&gt;

&lt;p&gt;通过多帧平均可以分离temporal noise和FPN，然后用其他信号处理的方法去除FPN，下一篇将介绍去噪的Spacial domain 和 transform domain的方法。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>